// %expect 3

%{
//
//  tikzparser.y
//  TikZiT
//  
//  Copyright 2010 Chris Heunen. All rights reserved.
//  
//  
//  This file is part of TikZiT.
//  
//  TikZiT is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  
//  TikZiT is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with TikZiT.  If not, see <http://www.gnu.org/licenses/>.
//  
#include <stdio.h>
#include <string.h>
#import <Foundation/Foundation.h>
#import "TikzGraphAssembler.h"
#import "GraphElementProperty.h"
	
extern char* yystr;
extern int yylineno;
extern int tokenpos;
extern int yylex(void);
extern void yyerror(const char *str);

%}

%union {
	NSPoint pt;
	NSString *nsstr;
};

%error-verbose

%token BEGIN_TIKZPICTURE_CMD
%token END_TIKZPICTURE_CMD
%token BEGIN_PGFONLAYER_CMD
%token END_PGFONLAYER_CMD
%token DRAW_CMD
%token NODE_CMD
%token PATH_CMD
%token RECTANGLE
%token NODE
%token AT
%token TO
%token SEMICOLON
%token COMMA

%token LEFTPARENTHESIS
%token RIGHTPARENTHESIS
%token LEFTBRACKET
%token RIGHTBRACKET
%token FULLSTOP
%token EQUALS
%token COORD
%token PROPSTRING
%token REFSTRING
%token DELIMITEDSTRING

%type<nsstr> nodename
%type<nsstr> optanchor
%type<nsstr> val

%%

tikzpicture: BEGIN_TIKZPICTURE_CMD optproperties tikzcmds END_TIKZPICTURE_CMD;
tikzcmds: tikzcmds tikzcmd | ;
tikzcmd: node | edge | boundingbox | ignore;

ignore: BEGIN_PGFONLAYER_CMD DELIMITEDSTRING | END_PGFONLAYER_CMD;

optproperties: LEFTBRACKET properties RIGHTBRACKET | ;
properties: property extraproperties;
extraproperties: COMMA property extraproperties | ;
property:
	val EQUALS val
	{
		TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
		GraphElementProperty *p = [[GraphElementProperty alloc] initWithPropertyValue:$<nsstr>3 forKey:$<nsstr>1];
		[[a data] addObject:p];
		[p release];
	}
	| val
	{
		TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
		GraphElementProperty *p = [[GraphElementProperty alloc] initWithAtomName:$<nsstr>1];
		[[a data] addObject:p];
		[p release];
	};
val: PROPSTRING { $$ = $<nsstr>1; } | DELIMITEDSTRING { $$ = $<nsstr>1; };

nodecmd: NODE_CMD { [[TikzGraphAssembler currentAssembler] prepareNode]; };
nodename: LEFTPARENTHESIS REFSTRING RIGHTPARENTHESIS { $$ = $<nsstr>2; };
node: nodecmd optproperties nodename AT COORD DELIMITEDSTRING SEMICOLON
	{
		TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
		[[a currentNode] setName:$<nsstr>3];
		[[a currentNode] setPoint:$<pt>5];
		[[a currentNode] setLabel:$<nsstr>6];
		[a finishNode];
	};

edgecmd : DRAW_CMD { [[TikzGraphAssembler currentAssembler] prepareEdge]; };
edge: edgecmd optproperties source TO optedgenode target SEMICOLON
	{
		TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
		[a finishEdge];
	};
optanchor:  { $$ = @""; } | FULLSTOP REFSTRING { $$ = $<nsstr>2; };
source: LEFTPARENTHESIS REFSTRING optanchor RIGHTPARENTHESIS
    {
        TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
        [a setEdgeSource:$<nsstr>2
        anchor:$<nsstr>3];
    };
target: LEFTPARENTHESIS REFSTRING optanchor RIGHTPARENTHESIS
    {
        TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
        [a setEdgeTarget:$<nsstr>2
        anchor:$<nsstr>3];
    }
    | selfloop
    {
        TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
        [a setEdgeTarget:@""
        anchor:@""];
    };
selfloop: LEFTPARENTHESIS RIGHTPARENTHESIS;

edgenodecmd: NODE { [[TikzGraphAssembler currentAssembler] prepareNode]; };
optedgenode:
	| edgenodecmd optproperties DELIMITEDSTRING
	{
		TikzGraphAssembler *a = [TikzGraphAssembler currentAssembler];
		[[a currentNode] setLabel:$<nsstr>3];
		[a finishNode];
	}

ignoreprop: val | val EQUALS val;
ignoreprops: ignoreprop ignoreprops | ;
optignoreprops: LEFTBRACKET ignoreprops RIGHTBRACKET;
boundingbox:
	PATH_CMD optignoreprops COORD RECTANGLE COORD SEMICOLON
	{
		Graph *g = [[TikzGraphAssembler currentAssembler] graph];
		[g setBoundingBox:NSRectAroundPoints($<pt>3, $<pt>5)];
	};

/* vi:ft=yacc:noet:ts=4:sts=4:sw=4
*/
