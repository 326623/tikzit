%error-verbose

%{
/*
 * Copyright 2010       Chris Heunen
 * Copyright 2010-2013  Aleks Kissinger
 * Copyright 2013       K. Johan Paulsson
 * Copyright 2013       Alex Merry <dev@randomguy3.me.uk>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#import "TikzGraphAssembler+Parser.h"
#import "Edge.h"

extern char* yystr;
extern int yylineno;
extern int tokenpos;
extern int yylex(void);
extern void yyerror(const char *str);

%}

%code requires {
#import "GraphElementData.h"
#import "GraphElementProperty.h"
#import "Node.h"
struct noderef {
	Node *node;
	NSString *anchor;
};
}

%union {
	NSPoint pt;
	NSString *nsstr;
	GraphElementProperty *prop;
	GraphElementData *data;
	Node *node;
	struct noderef noderef;
};


%token BEGIN_TIKZPICTURE_CMD
%token END_TIKZPICTURE_CMD
%token BEGIN_PGFONLAYER_CMD
%token END_PGFONLAYER_CMD
%token DRAW_CMD
%token NODE_CMD
%token PATH_CMD
%token RECTANGLE
%token NODE
%token AT
%token TO
%token SEMICOLON
%token COMMA

%token LEFTPARENTHESIS
%token RIGHTPARENTHESIS
%token LEFTBRACKET
%token RIGHTBRACKET
%token FULLSTOP
%token EQUALS
%token COORD
%token PROPSTRING
%token REFSTRING
%token DELIMITEDSTRING

%type<nsstr>   nodename
%type<nsstr>   optanchor
%type<nsstr>   val
%type<prop>    property
%type<data>    extraproperties
%type<data>    properties
%type<data>    optproperties
%type<node>    optedgenode
%type<noderef> noderef
%type<noderef> optnoderef

%%

tikzpicture: BEGIN_TIKZPICTURE_CMD optproperties tikzcmds END_TIKZPICTURE_CMD;
tikzcmds: tikzcmds tikzcmd | ;
tikzcmd: node | edge | boundingbox | ignore;

ignore: BEGIN_PGFONLAYER_CMD DELIMITEDSTRING | END_PGFONLAYER_CMD;

optproperties:
	LEFTBRACKET properties RIGHTBRACKET
	{ $$ = $<data>2; }
	| { $$ = nil; };
properties: property extraproperties
	{
		[$<data>2 addObject:$<prop>1];
		$$ = $<data>2;
	};
extraproperties:
	COMMA property extraproperties
	{
		[$<data>3 addObject:$<prop>2];
		$$ = $<data>3;
	}
	| { $$ = [GraphElementData data]; };
property:
	val EQUALS val
	{ $$ = [GraphElementProperty property:$<nsstr>1 withValue:$<nsstr>3]; }
	| val
	{ $$ = [GraphElementProperty atom:$<nsstr>1]; };
val: PROPSTRING { $$ = $<nsstr>1; } | DELIMITEDSTRING { $$ = $<nsstr>1; };

nodename: LEFTPARENTHESIS REFSTRING RIGHTPARENTHESIS { $$ = $<nsstr>2; };
node: NODE_CMD optproperties nodename AT COORD DELIMITEDSTRING SEMICOLON
	{
		Node *node = [Node node];
		[node setData:$<data>2];
		[node setName:$<nsstr>3];
		[node setPoint:$<pt>5];
		[node setLabel:$<nsstr>6];
		[[TikzGraphAssembler currentAssembler] addNodeToMap:node];
		[[[TikzGraphAssembler currentAssembler] graph] addNode:node];
	};

optanchor:  { $$ = nil; } | FULLSTOP REFSTRING { $$ = $<nsstr>2; };
noderef: LEFTPARENTHESIS REFSTRING optanchor RIGHTPARENTHESIS
	{
		$$.node = [[TikzGraphAssembler currentAssembler] nodeWithName:$<nsstr>2];
		$$.anchor = $<nsstr>3;
	};
optnoderef:
	noderef { $$ = $<noderef>1; }
	| LEFTPARENTHESIS RIGHTPARENTHESIS { $$.node = nil; $$.anchor = nil; }
optedgenode:
	{ $$ = nil; }
	| NODE optproperties DELIMITEDSTRING
	{
		$$ = [Node node];
		[$$ setData:$<data>2];
		[$$ setLabel:$<nsstr>3];
	}
edge: DRAW_CMD optproperties noderef TO optedgenode optnoderef SEMICOLON
	{
		Edge *edge = [Edge edge];
		[edge setData:$<data>2];
		[edge setSource:$<noderef>3.node];
		[edge setSourceAnchor:$<noderef>3.anchor];
		[edge setEdgeNode:$<node>5];
		if ($<noderef>6.node) {
			[edge setTarget:$<noderef>6.node];
			[edge setTargetAnchor:$<noderef>6.anchor];
		} else {
			[edge setTarget:$<noderef>3.node];
			[edge setTargetAnchor:$<noderef>3.anchor];
		}
		[edge setAttributesFromData];
		[[[TikzGraphAssembler currentAssembler] graph] addEdge:edge];
	};

ignoreprop: val | val EQUALS val;
ignoreprops: ignoreprop ignoreprops | ;
optignoreprops: LEFTBRACKET ignoreprops RIGHTBRACKET;
boundingbox:
	PATH_CMD optignoreprops COORD RECTANGLE COORD SEMICOLON
	{
		[[[TikzGraphAssembler currentAssembler] graph] setBoundingBox:NSRectAroundPoints($<pt>3, $<pt>5)];
	};

/* vi:ft=yacc:noet:ts=4:sts=4:sw=4
*/
